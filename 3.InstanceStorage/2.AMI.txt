=> AMI: Amazon machine image.
-> AMI are customization of an EC2 instance:
   1> you can add your own software, configuration,operating system, monitoring.
   2> Faster boot/configuration time bec all your package are pre-packaged.
-> AMI are built for specific region and (and can be copied across regions).
-> you can launch EC2 instance from:
   a> A public AMI: provided by aws 
   b> your own AMI: you can maintain by own.
   c> An aws marketplace AMI: an AMI made by someone else and potentially sold to someone.

=> AMI creation Process(from an EC2 instance):
-> start an EC2 instance and customize it.
-> stop the instance(for data integrity).
-> Build an AMI - this will also create EBS snapshots behind the scene.
-> finally, we can Launch instances from other AMIs.
-> Suppose we created an EC2 instance in any particular region suppose eu-east-1a, so after customization of this EC2 instance, 
   you can create AMI from it. This will be our custom AMI. Then we can launch the copy of that instance in other region,
   we can say eu-eash-1b.

=> Key Takeaways
-> An AMI (Amazon Machine Image) customizes EC2 instances by prepackaging software and configurations.
-> AMIs can be created by AWS, customized by users, or purchased from the AWS Marketplace.
-> Creating your own AMI results in faster boot and configuration times for EC2 instances.
-> AMIs can be region-specific but are copyable across AWS regions to leverage global infrastructure.

=> AMI In Detail:
------------------
=> AMI is a template used to create EC2 instance.
-> It contains everything needed to launch virtual server in cloud.

-> contents of AMI:
- Operating system(lunux, windows, etc)
- Application server(Apache, Nginx etc)
- preinstalled software (node, java etc)
- configuration file
- EBS snapshot (root volume data)

-> Think of AMI as preconfigured image or snapshot of computer.

=> Why is AMI useful?
-> you can launch multiple EC2 instances with the same configuration.
-> you can quickly restore a known working system.
-> you can share your AMI with other aws accounts or publicly.
-> you can cusomize an EC2 and save it as a new AMI to use later.

Example:
- Launch an EC2 instance with Ubuntu.
- Install Node.js, MongoDB, and configure your app.
- Everything is working great!
- You create an AMI of this instance.
- Later, you can launch new EC2 instances from this AMI — and they’ll have Node.js, MongoDB, and your app ready to go, 
  without repeating setup steps.

