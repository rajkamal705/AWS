=> Sticky Session(Session affinity):
-----------------------------------
-> It is possible to implement stickiness so that same client is always redirected to the same instance behind a load balancer.
-> This works for classic Load Balancer, Application Load Balancer and Network Load Balancer.
-> The cookies used for stickiness has an expiration date that you control.
-> Use case: This make sure the user doesn't loose his session data.
-> Enabling backend may bring imbalance to the load over the backend EC2 instances.

=> Sticky Session - Cookie names:
----------------------------------
1> Application based cookie:
a> Custom Cookie:
-> generated by the target application itself.
-> can include any custom attribute required by the application.
-> The cookie name must be specified individually for each target group
-> you must not use the following reserved names: AWSALB, AWSALBAPP, or AWSALBTG

b> Application cookie:
-> cookie generated by the load balancer.
-> Cookie name is AWSALBAPP.

2> Duration based cookie:
-> cookie generated by the load balancer.
-> Cookie name is AWSALB for ALB and AWSELB for CLB.

=> Key Takeaways
----------------
-> Sticky sessions, or session affinity, ensure that a clientâ€™s requests are consistently routed to the same backend instance.
-> Sticky sessions can be enabled on Classic Load Balancer, Application Load Balancer, and Network Load Balancer using cookies.
-> There are two types of cookies for stickiness: application-based cookies generated by the target application, and duration-based cookies generated by the load balancer.
-> Enabling stickiness may cause load imbalance if some users have very sticky sessions.


=> practice:
------------
-> set the stickiness by editing the target group attributes.
-> you can enable and disable the stickiness from there.

